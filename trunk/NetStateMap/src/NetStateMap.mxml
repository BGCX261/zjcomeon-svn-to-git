<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   
			   width="100%" height="100%"
			   
			   xmlns:degrafa="http://www.degrafa.com/2007" 
			   xmlns:paint="com.degrafa.paint.*"
			   xmlns:geometry="com.degrafa.geometry.*" 
			   
			   xmlns:local="*"
			   
			   creationComplete="initMap()"
			   			   
			   skinClass="zjMap.skin.myApplicationSkin" xmlns:module="zjMap.module.*"
			   
			   preloader="zjPreloader"
			   >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	
	<fx:Style source="/css/superPanel/css/Styles.css"/>
	<fx:Style source="/css/Style.css"/>
	
	
	<fx:Script>
		<![CDATA[
			import zjMap.MapLine.NetStateLine;
			import zjMap.skin.myApplicationSkin;

			
			
			/***
			 * 
			 * 外部接口
			 * */
			private function ConnectionFun():void{
				if(ExternalInterface.available){
					if(ExternalInterface.call("jsReady")){
						
						//ExternalInterface.addCallback("setPingData",setPingData);
						
						var pingDataObj:Object = ExternalInterface.call("setPingData");
						
					}else{
						//Alert.show("Connection Failed");
						
						
						var data:Object={
							self:{id:"cn",en:"china",cn:'中国'},
							ping:[
								{id:"in",en:"India",cn:"印度",state:0},
								{id:"kp",en:"R.O.Korea",cn:"韩国",state:1},
								{id:"jp",en:"Japan",cn:"日本",state:1}
							]
						}
						
						//setPingData(data);
					}
				}
			}
			
			
		]]>
	</fx:Script>
	
	
	<fx:Script>
		<![CDATA[
			import org.hasseg.externalMouseWheel.ExternalMouseWheelSupport;
			import mx.binding.utils.BindingUtils;
			import zjMap.MapMark.OceanIsle;
			import zjMap.MapMark.MapMarkShadow;
			import zjMap.MapMark.MarkEvent.MouseDownEvent;
			import zjMap.module.M2MWin;
			import zjMap.module.MapPath;
			import zjMap.module.mapItem;
			import zjMap.MarkDishWin.MarkDishWin;
			import zjMap.MapMark.ConnectMaskLayer;
			import mx.managers.PopUpManager;
			import zjMap.MapMark.MarkMaskLayer;
			import zjMap.MapMark.MarkLegend;
			import zjMap.MapCurosr.CursorCloseHand;
			import zjMap.MapCurosr.CursorOpenHand;
			import zjMap.MapLine.NetStateLine;
			import mx.core.INavigatorContent;
			import mx.events.ResizeEvent;
			
			import zjMap.MapMark.MapMark;
			import zjMap.MapMark.MapMarkList;
			import zjMap.MapTool.MapTool;
			
			import com.adobe.serialization.json.JSON;
			import com.greensock.TweenLite;
			import com.greensock.TweenMax;
			import com.greensock.layout.AutoFitArea;
			import com.greensock.layout.ScaleMode;
			import com.greensock.plugins.TweenPlugin;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.ToolTip;
			import mx.managers.ToolTipManager;
			
			import spark.primitives.Rect;
			
			/**当前地图缩放比率*/
			private var currentMapScaleX:Number = 1;
			private var currentMapScaleY:Number = 1;
			/**当前地图坐标*/
			private var currentMapPos:Point = new Point(0,0);
			/**当前鼠标缩放值*/
			private var currentMapZoom:Number = 1;
			/**当前鼠标缩放坐标*/
			private var currentMapMousePos:Point = new Point(0,0);
			
			private var isMapFocus:Boolean = false;
			private var drapT:Number,drapR:Number,drapB:Number,drapL:Number
			
			
			private var pos:Array = new Array();
			private var distance:Number = 20;
			
			private var markDrapPoint:Point = new Point(0,0);
			
			/**保存所有海洋岛屿标签*/
			private var oceanIsleGroupArr:Array = new Array();
			/**保存所有标记*/
			private var markerGroupArr:Array = new Array();
			/**保存所有标记影子*/
			private var markerShadowGroupArr:Array = new Array();
			/**自己*/
			private var selfMarkObj:Object = new Object();
			/**所有站点*/
			private var markerDataArray:Array = new Array();
			/**所有网络状态线*/
			private var netStateLineArrCol:ArrayCollection = new ArrayCollection();
			
			/**导航工具*/
			private var nav:MapTool;
			/**站点列表*/
			private var markList:MapMarkList;
			/**标记图例*/
			private var markLegend:MarkLegend;
			/**标记移动时背景遮罩层*/
			private var markMask:MarkMaskLayer;
			/**标记连接时背景遮罩层*/
			private var connMask:ConnectMaskLayer;
			/**标记连接设置窗*/
			private var connWin:M2MWin;
			
			/**地图板块tip*/
			private var countriesTip:ToolTip;
			
			/**高亮*/
			private var selectionGlow:GlowFilter=new GlowFilter(0xFFFFFF, 0.8, 10, 10, 3);
			
			private function initMap():void{
				
				//TweenPlugin.activate([TransformAroundPointPlugin]);
				
				/**初始化地图tip*/
				//initCountriesTip();
				
				/**初始化标记移动背景层*/
				init_MarkMaskLayer();
				
				/**初始化标记连接背景层*/
				init_ConnectMaskLayer();
				
				/**初始化海洋岛屿名称层*/
				init_Ocean_isles();
				
				/**初始化工具*/
				init_MapTool();
				
				/**初始化站点*/
				init_Mark();
				
				/**初始化标记图例*/
				init_MarkLegend();
				
				/**初始化标记连接设置窗体*/
				init_M2MWin();
				
				/**初始化地图鼠标事件*/
				initMapEvent();
				
				/**特殊浏览器鼠标滚轮支持*/
				//init_mac_whellSupport();
				
				/**初始化地图位置*/
				
				initMapPosition(new Point(668,129));
				
				
				/**外部接口*/
				//ConnectionFun();
				


			}
			
			/***********************************************************************************************
			 * 
			 * 
			 * fire cherom 浏览器 鼠标滚轮事件 支持函数
			 * 
			 * ***************************************************************************************************/
			
			
			/***********************************************************************************************
			 * 
			 * 
			 * 
			 * 
			 * ***************************************************************************************************/
			
			/**
			 * 初始化国家tip
			 * 
			 * */
			private function initCountriesTip():void{
				
				countriesTip=ToolTip(ToolTipManager.createToolTip("", -100, -100, null));
				countriesTip.visible=false;
				
			}
			
		
	
			/***********************************************************************************************
			 * 
			 * 
			 * 
			 * 
			 * ***************************************************************************************************/
			/**
			 * setScalZoom:鼠标缩放
			 * mapStartDrap:拖动应用
			 * onMapMouseOver：高亮显示
			 * */
			
			private function initMapEvent():void{
				
				map_surface.addEventListener(MouseEvent.MOUSE_WHEEL,setScalZoom);
				
				map_surface.addEventListener(MouseEvent.MOUSE_DOWN,mapStartDrap);
				
				map_surface.addEventListener(MouseEvent.MOUSE_OVER,onMapMouseOver);
				
				this.addEventListener(MouseEvent.MOUSE_OVER,onAppMouseOver);
				this.addEventListener(ResizeEvent.RESIZE,onAppLayout);
			}
			
			private function setAppFocus(evt:MouseEvent):void{
				map_surface.setFocus();
			}
			
			private function mapStartDrap(evt:MouseEvent):void{
				/**如果地图未锁*/
				if(!nav.getLockState()){
					if(evt.target is mapItem || evt.target is MapPath){
				
						/**改变鼠标指针形状*/
						//cursorManager.setCursor( CursorOpenHand );
						setCursorType(CursorCloseHand);
						
						
							//var dragRect:Rectangle=new Rectangle(0,0,3000,1500);
							//var dragRect:Rectangle=new Rectangle(drapL,drapT,drapR-drapL,drapB-drapL);
							map_surface.startDrag(false);
							map_surface.addEventListener(MouseEvent.MOUSE_MOVE,mapMoveDrag);
							map_surface.addEventListener(MouseEvent.MOUSE_UP,mapStopDrag);
						
					}
				}
			}
			private function mapMoveDrag(evt:MouseEvent):void{
				moveAllMaskLayer();
			}	
			private function mapStopDrag(evt:MouseEvent):void{
				/**删除鼠标指针形状*/
				
				setCursorType(CursorOpenHand);
				
				map_surface.stopDrag();
				map_surface.removeEventListener(MouseEvent.MOUSE_UP,mapStopDrag);
				map_surface.removeEventListener(MouseEvent.MOUSE_MOVE,mapMoveDrag)
			}
			
			/**
			 * 国家tip
			 * 国家高亮
			 * */
			private function onMapMouseOver(evt:MouseEvent):void{
				
				
				if (evt.target is mapItem){
					
					map_group.addEventListener(MouseEvent.MOUSE_MOVE, onMapMove);
					map_group.addEventListener(MouseEvent.MOUSE_OUT, onMapMouseOut);
					
					if(countriesTip){
						countriesTip.visible = true;
						countriesTip.text = evt.target.tooltip;
					}
					//var path:Path = evt.target.geometry[0];
					//path.filters = [selectionGlow];
				}
				
			}
			/**
			 * 取消国家高亮
			 * */
			private function onMapMouseOut(evt:MouseEvent):void{
				if(countriesTip){
					countriesTip.visible = false;
				}
				map_group.removeEventListener(MouseEvent.MOUSE_MOVE, onMapMove);
				map_group.removeEventListener(MouseEvent.MOUSE_OUT, onMapMouseOut);
				
				if (evt.target is mapItem){
					//var path:Path = evt.target.geometry[0];
					//path.filters = null;
				}else{
					
				}
			}
			
			private function onMapMove(evt:MouseEvent):void{
				markPos.text = map_group.mouseX + "," +map_group.mouseY + "/"+line_group.mouseX+","+line_group.mouseY;
				if (countriesTip)
				{
					countriesTip.move(evt.stageX + 20, evt.stageY);
					if (countriesTip.visible == false){
						countriesTip.visible=true;
					}
				}
			}
			/**
			 * 滚轮设置缩放
			 * */
			private function setScalZoom(evt:MouseEvent):void{
	
				if(evt.delta>0){
					nav.zVSlider.slider.value += nav.zVSliderInterval;		//间隔
				}else{
					nav.zVSlider.slider.value -= nav.zVSliderInterval;		//间隔
				}
				
				
				if(nav.zVSlider.slider.value > nav.getSliderMaxValue() || 
					nav.zVSlider.slider.value < nav.getSliderMiniValue()
				){
					
				}else{
					//获取当前鼠标所在位置坐标
					var omx:Number = map_group.mouseX;
					var omy:Number = map_group.mouseY;
					countCurrentPointToScale(new Point(omx,omy));
				}
				
			}
			/**
			 * 重新布局
			 * */
			private function onAppLayout(evt:ResizeEvent):void{
				markList.x = this.width - 20;		//列表
				
				nav.x = 10;							//工具
				
				markLegend.x = this.width - markLegend.shapeWidth - 10;
				markLegend.y = this.height - markLegend.shapeHeight - 10;
				
				
				
				if(nav.getMMoveAble()){
					markMask.reDraw(this.width,this.height);
				}
				
				if(nav.getMConnectAble()){
					connMask.reDraw(this.width,this.height);
				}
				
				moveAllMaskLayer();				//标记遮罩
			}
			
			/**
			 * 鼠标经过事件
			 * */
			private function onAppMouseOver(evt:MouseEvent):void{
				//trace(evt.target)
				if(evt.target is MapPath || evt.target is mapItem){
					setCursorType(CursorOpenHand);
				}else{
					setCursorType(null);
				}
			}
			
			/***********************************************************************************************
			 * 
			 * 
			 * 
			 * 
			 * ***************************************************************************************************/
			
			/**
			 * 初始化站点
			 * 
			 * */
			[Bindable] private var sites:XMLList;  
			private function init_Mark():void{
				var request:URLRequest = new URLRequest("data/sites.xml");  
				var loader:URLLoader = new URLLoader(request);  
				loader.addEventListener(Event.COMPLETE, loaderCompleteHandler);  
				
			}
			private function loaderCompleteHandler(evt:Event):void{
				var xml:XML = XML(evt.target.data)
				
				sites = xml.site as XMLList;
				
				var tempMarkX:Number = 10;
				
				markTotalNum.text = sites.length();
				
				for(var i:int=0;i<sites.length();i++){
					

					var site_pos:String = sites[i].@pos;
					var pos:Point = new Point(Number(site_pos.split(",")[0]),Number(site_pos.split(",")[1]));

					var obj:Object = new Object();
					obj.id = sites[i].@id;
					obj.cn = sites[i].@cn;
					obj.en = sites[i].@en;
					
					obj.pos = pos;
					
					obj.loc_pos = pos;								//转化坐标 本地坐标 xml
					
					obj.gl_pos = transformMapToMarkPostion(pos);	//转化坐标 全局坐标
					
					obj.type = sites[i].@type;
					//sitesMarkArrCol.addItem(obj);
					
					markerDataArray.push(obj);
					
					
					addSiteMark(obj);

				}
				
				
				/**初始化站点列表*/
				init_MarkList();
			}
			
			/**
			 * 创建标记实例
			 * 存入标记数组中
			 * */
			private function addSiteMark(data:Object):void{
				var move:Boolean = false;
				
				//如果移动开关打开
				if(markMask.layerShow == true){
					move = true;
				}else{
					move = false;
				}

				var mark:MapMark = new MapMark(data,move);
				
				mark.x = data.gl_pos.x;
				mark.y = data.gl_pos.y;
				
				mark.addEventListener(MouseEvent.MOUSE_DOWN,onMarkDrapDown);
				mark_group.addChild(mark);
				
				/**放入标记数组*/
				markerGroupArr.push(mark);
				
				
				//addMarkShadow(data);
			}
			/**
			 * 创建标记影子实例
			 * 存入标记影子数组中
			 * */
			private function addMarkShadow(data:Object):void{
				var shadow:MapMarkShadow = new MapMarkShadow(data);
				shadow.x = data.gl_pos.x;
				shadow.y = data.gl_pos.y;
				
				markshadow_group.addChild(shadow);
				
				/**放入标记影子数组*/
				markerShadowGroupArr.push(shadow);
			}
			
			/**
			 * 设置拖动
			 * */
			private function onMarkDrapDown(evt:MouseEvent):void{
				var mark:MapMark = evt.target as MapMark;
				if(mark.drapEnable){
					mark.startDrag(false);
					mark.addEventListener(MouseEvent.MOUSE_MOVE,onMarkDrapMove);
					mark.addEventListener(MouseEvent.MOUSE_UP,onMarkDrapUp);
				}
			}
			/**
			 * 移动过程中
			 * */
			private function onMarkDrapMove(evt:MouseEvent):void{
				var mark:MapMark = evt.target as MapMark;
				mark.glPos = new Point(evt.target.x,evt.target.y);	/**记录当前移动后的全局坐标*/
				
				mark.locPos = transformMarkToMapPostion(evt.target.glPos);	/**记录当前移动后的本地坐标*/
				
				mark.updateTipContent();
				
			}
			/**
			 * 停止移动
			 * */
			private function onMarkDrapUp(evt:MouseEvent):void{
				
				evt.target.stopDrag();
				evt.target.removeEventListener(MouseEvent.MOUSE_UP,onMarkDrapUp);
				
			}
			
			/**
			 * 
			 * 设置标记是否移动
			 * */
			public function setMakerMove(enable:Boolean):void{
				
				showHideMarkMaskLayer(enable);
				
				for(var i:int=0;i<markerGroupArr.length;i++){
					//markerGroupArr[i].setMarkerMove(enable);
					markerGroupArr[i].drapEnable = enable;
					//trace(markerGroupArr[i].siteId,markerGroupArr[i].drapEnable);
					/* if(enable){
					markerGroupArr[i].addEventListener(MouseEvent.MOUSE_DOWN,onMarkDrapDown);
					} */
					
				}
				
			}
			
			
			/**
			 * 初始化站点列表
			 * */
			private function init_MarkList():void{
				
				markList = new MapMarkList(markerDataArray,"站点索引");
				
				markList.x = container.width - 10;
				markList.y = 50;
				this.container.addElement(markList);
				
				markList.drawMarkerItem();
				
				
			}
			
			/***********************************************************************************************
			 * 
			 * 
			 * 
			 * 
			 * ***************************************************************************************************/
			/**
			 * 初始化标记图例
			 * 
			 * */
			private function init_MarkLegend():void{
				markLegend = new MarkLegend();
				this.container.addElement(markLegend);
				markLegend.y = container.height - markLegend.shapeHeight - 10;
				markLegend.x = container.width - markLegend.shapeWidth - 10;
			}
			
			/***********************************************************************************************
			 * 
			 * 
			 * 
			 * 
			 * ***************************************************************************************************/
			/**
			 * 初始化标记层遮罩
			 * */
			private function init_MarkMaskLayer():void{
				markMask = new MarkMaskLayer(this.width,1);
				markmask_group.addChild(markMask);
				
				
				moveMarkMaskLayer();
			}
			/**
			 * 调整标记移动遮罩层位置
			 * */
			private function moveMarkMaskLayer():void{
				
				var p:Point = this.localToGlobal(new Point(0,0));
				var pp:Point = map_surface.globalToLocal(p);

				markMask.x = pp.x;
				markMask.y = pp.y;

			}
			/**
			 * 设置背景层尺寸
			 * 
			 * */
			private function showHideMarkMaskLayer(enable:Boolean):void{
				if(enable){
					//TweenLite.to(markMask,1.5,{height:this.height});
					markMask.setBgHeight(this.height);
					markMask.layerShow = true;
				}else{
					//TweenLite.to(markMask,1,{height:1});
					markMask.setBgHeight(1);
					markMask.layerShow = false;
				}
				
			}
			
			
			/***********************************************************************************************
			 * 
			 * 
			 * 
			 * 
			 * ***************************************************************************************************/
			/**
			 * 初始化标记连接层遮罩
			 * */
			private function init_ConnectMaskLayer():void{
				connMask = new ConnectMaskLayer(this.width,1);
				linemask_group.addChild(connMask);
				
				moveConnectMaskLayer();
			}
			/**
			 * 调整标记连接遮罩层位置
			 * */
			private function moveConnectMaskLayer():void{
				
				var p:Point = this.localToGlobal(new Point(0,this.height));
				var pp:Point = map_surface.globalToLocal(p);
			
				connMask.x = pp.x ;
				connMask.y = pp.y - 1;
				
			}
			
			/**
			 * 设置连接背景层尺寸
			 * 
			 * */
			public function showHideConnectMaskLayer(enable:Boolean):void{
		
				if(enable){
					connMask.setBgHeight(this.height);
					connMask.layerShow = true;
					
				}else{
					
					connMask.setBgHeight(1);
					connMask.layerShow = false;
	
				}
				
				
			}
			/**
			 * 
			 * 设置标记连接按钮开关
			 * */
			public function setMakerConnect(enable:Boolean):void{
				
				showHideConnectMaskLayer(enable);

				connWin.init_TargetMarkList(markerDataArray);
				connWin.closeM2MWin(enable);
			}
			/**
			 * 窗体通知关闭连接按钮
			 * */
			public function closeMarkToConnect(enable:Boolean):void{
				nav.setMConnectAble(enable);
			}
			/***********************************************************************************************
			 * 
			 * 
			 * 
			 * 
			 * ***************************************************************************************************/
			/**
			 * 
			 * 初始化标记连接设置窗体
			 * */
			private function init_M2MWin():void{
				connWin = PopUpManager.createPopUp(this, M2MWin, false) as M2MWin;
				PopUpManager.centerPopUp(connWin);
				
				
				connWin.init_TargetMarkList(markerDataArray);
			}
			
			/***********************************************************************************************
			 * 
			 * 
			 * 
			 * 
			 * ***************************************************************************************************/
			/**
			 * 初始化导航
			 * */
			private function init_MapTool():void{
				currentMapScaleX = map_surface.scaleX;
				currentMapScaleY = map_surface.scaleY;
				currentMapPos.x = map_surface.x;
				currentMapPos.y = map_surface.y;
				
				nav = new MapTool(map_group.scaleX,4,false,true,true);
				nav.x = 10;
				nav.y = 50;
				container.addElement(nav);
				
				//拖动控制缩放
				nav.zVSlider.slider.addEventListener(Event.CHANGE,changeMapZoom);
				//左右按钮控制缩放
				nav.zVSlider.zoomOut.addEventListener(MouseEvent.CLICK,changeMapZoomIn);
				nav.zVSlider.zoomIn.addEventListener(MouseEvent.CLICK,changeMapZoomOut);
			}
			private function changeMapZoom(evt:Event):void{
				
				
				/**地图中心点*/
				var origin:Point = new Point(container.width/2,container.height/2);
				
				
				countCurrentPointToScale(origin);
			}
			
			/**
			 * 
			 * 根据提供的坐标计算缩放的中心点
			 * 
			 * */
			private function countCurrentPointToScale(point:Point):void{
				var zoom:Number =  Number(nav.zVSlider.slider.value);
				//trace("slider:",zoom)
				
				var relativeZoom:Number = zoom / map_group.scaleX;
				//trace(map_surface.scaleX,relativeZoom)
				
				var centerPoint:Point = map_group.globalToLocal(point);
				//trace("centerPoint：",centerPoint);
				centerPoint.x *= relativeZoom;
				centerPoint.y *= relativeZoom;
				var newCenterPoint:Point = map_group.localToGlobal(centerPoint);
				//trace("newCenterPoint：",newCenterPoint);
				var offset:Point = point.subtract(newCenterPoint);
				//trace("offset：",offset);
				
				TweenLite.to(map_group, 0, {x:(map_group.x+offset.x),y:(map_group.y+offset.y),scaleX:(map_group.scaleX*relativeZoom),scaleY:(map_group.scaleY*relativeZoom)});
				//TweenLite.to(line_group, 0, {x:(line_group.x+offset.x),y:(line_group.y+offset.y),scaleX:(line_group.scaleX*relativeZoom),scaleY:(line_group.scaleY*relativeZoom)});
				
				
				//mark_group.x += offset.x;
				//mark_group.y += offset.y;
				resetAllMarkPoint();
				
				resetAllConnectLinePoint();
				
				resetAllOceanIslePoint();
			}
			
			private function changeMapZoomIn(evt:MouseEvent):void{
				nav.zVSlider.slider.value -= nav.zVSliderInterval;		//间隔
				changeMapZoom(null);
			}
			private function changeMapZoomOut(evt:MouseEvent):void{
				nav.zVSlider.slider.value += nav.zVSliderInterval;		//间隔 
				changeMapZoom(null);
			}
			
			/**
			 * 重新设置标记坐标
			 * 
			 * */
			private function resetAllMarkPoint():void{
				for(var i:int=0;i<markerGroupArr.length;i++){
					var m:MapMark = markerGroupArr[i] as MapMark;
					
					var p:Point = transformMapToMarkPostion(m.objData.pos);
			
					m.x = p.x ;
					m.y = p.y ;
					
				}
				
				for(var j:int=0;j<markerShadowGroupArr.length;j++){
					var ms:MapMarkShadow = markerShadowGroupArr[j] as MapMarkShadow;
					
					var msp:Point = transformMapToMarkPostion(ms.objData.pos);
					
					ms.x = msp.x ;
					ms.y = msp.y ;
					
				}
			}
			
			/***********************************************************************************************
			 * 
			 * 
			 * 
			 * 
			 * ***************************************************************************************************/
			/**
			 * 根据当前缩放比例
			 * 选择显示 海洋 岛屿 名称
			 * */
			private function switch_show_Ocean_isles(zoom:Number):void{
	
				//ocean_isles.swtich_ocean_sea_isle(zoom);
			}
			/**
			 * 
			 * 
			 * 初始化海洋岛屿
			 * 
			 * */
			private function init_Ocean_isles():void{
				var request:URLRequest = new URLRequest("data/ocean_isles.xml");  
				var loader:URLLoader = new URLLoader(request);  
				loader.addEventListener(Event.COMPLETE, loaderCompleteHandler_ocean_isles); 
			}
			[Bindable] private var oceans:XMLList;  
			private function loaderCompleteHandler_ocean_isles(evt:Event):void{
				var xml:XML = XML(evt.target.data)
				
				oceans = xml.ocean as XMLList;
				
				for(var i:int=0;i<oceans.length();i++){
					
					var obj:Object = new Object();
					
					obj.text = oceans[i].@text;

					obj.pos = new Point(Number(oceans[i].@x),Number(oceans[i].@y));
					
					obj.loc_pos = obj.pos;								//转化坐标 本地坐标 xml
					
					obj.gl_pos = transformMapToMarkPostion(obj.pos);	//转化坐标 全局坐标					
					
					var oi:OceanIsle = new OceanIsle(obj);
					ocean_isles_group.addChild(oi);
					
					oi.x = obj.gl_pos.x;
					oi.y = obj.gl_pos.y;
					
					oceanIsleGroupArr.push(oi);
				}

			}
			
			/**
			 * 
			 * 重置所有海洋岛屿标签
			 * */
			private function resetAllOceanIslePoint():void{
				for(var i:int = 0;i<oceanIsleGroupArr.length;i++){
					
					var oi:OceanIsle = oceanIsleGroupArr[i] as OceanIsle;
						
					var p:Point = transformMapToMarkPostion(oi.oiData.pos);
					
					oi.x = p.x ;
					oi.y = p.y ;
						
				}
			}
			
			
			/***********************************************************************************************
			 * 
			 * 
			 * 
			 * 
			 * ***************************************************************************************************/
		
			/**
			 * 
			 * 画网络线
			 * 
			 * @param from：起始对象
			 * 
			 * @param to：目标对象
			 * @param state：网络状态
			 * */
			private function pingSiteLine(from:Object, to:Object, state:String):void{
				var fx:String = from.pos.split(",")[0];
				var fy:String = from.pos.split(",")[1];
				
				var fp:Point = new Point(Number(fx),Number(fy));
				
				var tx:String = to.pos.split(",")[0];
				var ty:String = to.pos.split(",")[1];
				var tp:Point = new Point(Number(tx),Number(ty));
				
				//localToContent(
				
				
				var lineId:String = (fp.x+"-"+fp.y) + "&" + (tp.x+"-"+tp.y);
				
				//trace(lineId);
				
				//先删除
				delNetStateLine(line_group,lineId)
				
				//再创建
				var line:NetStateLine = new NetStateLine(fp, tp,state,true);
				line_group.addChild(line);
				netStateLineArrCol.addItem(line);
				
				
			}
			/**
			 * 
			 * 延时删除网络线
			 * @param line:当前网络线
			 * @param tpoint:目标对象坐标
			 * @param fpoint:起始对象坐标
			 * */
			private function myDelayedCall(line:Sprite, tpoint:Point, fpoint:Point):void{
				
				line_group.removeChild(line);
				
			}
			
			private function toLine():void{
			
				var fx:String = pos_from.text.split(",")[0];
				var fy:String = pos_from.text.split(",")[1];
				
				var tx:String = pos_to.text.split(",")[0];
				var ty:String = pos_to.text.split(",")[1];
				
				var fp:Point = new Point(Number(fx),Number(fy));
				var tp:Point = new Point(Number(tx),Number(ty));
				
				fp = transformMapToMarkPostion(fp);
				tp = transformMapToMarkPostion(tp);
				
				//实线
				var lineId:String = (fp.x+"-"+fp.y) + "&" + (tp.x+"-"+tp.y);		
				//先删除
				delNetStateLine(line_group,lineId)
				var line:NetStateLine = new NetStateLine(fp, tp,"1",true);
				line_group.addChild(line);
				netStateLineArrCol.addItem(line);
				
				//延时删除
				//TweenLite.delayedCall(20, delNetStateLine, [line_group,lineId]);
				
				
			}
			
			/**
			 * 设置连接点
			 * 参数来源于 M2MWin窗体
			 * @formPoint: 起点
			 * @toPoint: 目标
			 * */
			public function connectLine(fp:Point,tp:Point,animate:Boolean):void{
				//删除所有
				delAllNetStateLine();
				
				if(fp == null){
					fp = transformMapToMarkPostion(new Point(668,129));
				}else{
					fp = transformMapToMarkPostion(fp);
				}
				tp = transformMapToMarkPostion(tp);
				
				
				createConnectLine(fp,tp,animate);
			}
			/**
			 * 创建标记连接
			 * @formPoint: 起点
			 * @toPoint: 目标
			 * */
			public function createConnectLine(fp:Point,tp:Point,animate:Boolean):void{
				
				
				//实线
				var lineId:String = (fp.x+"-"+fp.y) + "&" + (tp.x+"-"+tp.y);		
				trace("cre:",lineId)
				//先删除
				delNetStateLine(line_group,lineId)
				var line:NetStateLine = new NetStateLine(fp, tp,"1",animate);
				line_group.addChild(line);
				netStateLineArrCol.addItem(line);
				if(animate){
					//延时删除
					//TweenLite.delayedCall(20, delNetStateLine, [line_group,lineId]);
				}
			}
			/**
			 * 
			 * 删除网络状态线
			 * @param parent:父级容器
			 * @param lineId:线id
			 * */
			private function delNetStateLine(parent:Sprite, lineId:String):void{
				for(var i:int=0;i<netStateLineArrCol.length;i++){
					if(netStateLineArrCol[i].nslId == lineId){
						
						parent.removeChild(netStateLineArrCol[i]);
						
						netStateLineArrCol.removeItemAt(i);
						netStateLineArrCol.refresh();
						
					}
				}
			}
			
			/**
			 * 
			 * 删除所有网络状态线
			 * 
			 * */
			private function delAllNetStateLine():void{
				for(var i:int=0;i<netStateLineArrCol.length;i++){
					
					TweenMax.killTweensOf(netStateLineArrCol[i]);
					
					line_group.removeChild(netStateLineArrCol[i]);
						
					netStateLineArrCol.removeItemAt(i);
					netStateLineArrCol.refresh();
					
					
				}
			}
			
			/**
			 * 
			 * 查找网络状态线
			 * @param lineId:线id
			 * */
			private function getNetStateLine(lineId:String):NetStateLine{
				var line:NetStateLine = null;
				
				for(var i:int=0;i<netStateLineArrCol.length;i++){
					if(netStateLineArrCol[i].nslId == lineId){
						line = netStateLineArrCol[i];
					}
				}
				
				return line;
			}
			
			
			/**
			 * 重新设置连接线坐标
			 * 
			 * */
			private function resetAllConnectLinePoint():void{

				//如果连接遮罩也打开
				if(connMask.layerShow){
					var tp:Point = connWin.targetObj.pos;//获取当前选中的标记，并取坐标
					
					connectLine(new Point(668,129),tp,false);
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import zjMap.MapCurosr.CursorOpenHand;
			import com.degrafa.geometry.Path;
			import flash.filters.GlowFilter;
			
			
			/**
			 * 定位到指定标记
			 * @param pos：标记坐标
			 * @param duration：持续时间
			 * */
			public function initMapPosition(p:Point,duration:Number = 0):void{
				
				
				var pos:Point = transformMapToMarkPostion(p);
				var px:Number = -pos.x+container.width/2;
				var py:Number = -pos.y+container.height/2;
				
				//trace(pos,container.width/2,container.height/2,"--",px,py)
				
				//定位至亚洲，中国
				TweenLite.to(map_surface, duration, {x:px,y:py,onUpdate:function():void{
					//移动到目标标记位置过程中调整标记移动遮罩层
					moveAllMaskLayer();
				}});
					
			}
			
			/**
			 * 移动遮罩层 
			 * 
			 * */
			private function moveAllMaskLayer():void{
				moveMarkMaskLayer();
				moveConnectMaskLayer();
			}
			

			/**
			 * 转换 地图坐标为标记坐标
			 * 
			 * */
			private function transformMapToMarkPostion(point:Point):Point{
				
				var mapGroupP:Point = map_group.localToGlobal(point);
				//var pp:Point = map_group.globalToLocal(mp);
				//var ppp:Point = mark_group.localToGlobal(mp);
				var markGroupP:Point = mark_group.globalToLocal(mapGroupP);
				
				markGroupP = new Point(Math.round(markGroupP.x),Math.round(markGroupP.y)); 
				
				return markGroupP;
			}
			
			/**
			 * 转换 地图坐标为标记坐标
			 * 
			 * */
			private function transformMarkToMapPostion(point:Point):Point{
				
				var markGroupP:Point = mark_group.localToGlobal(point);
				//var pp:Point = map_group.globalToLocal(mp);
				//var ppp:Point = mark_group.localToGlobal(mp);
				var mapGroupP:Point = map_group.globalToLocal(markGroupP);
				
				mapGroupP = new Point(Math.round(mapGroupP.x),Math.round(mapGroupP.y)); 
				return mapGroupP;
			}
			
			
			/**
			 * 转换 地图坐标为连线坐标
			 * 
			 * */
			private function transformMapToLinePostion(point:Point):Point{
				
				var mapGroupP:Point = map_group.localToGlobal(point);
				//var pp:Point = map_group.globalToLocal(mp);
				//var ppp:Point = mark_group.localToGlobal(mp);
				var lineGroupP:Point = line_group.globalToLocal(mapGroupP);
				
				return lineGroupP;
			}
			
			/**
			 * 设置光标类型
			 * 
			 * */
			private function setCursorType(type:Class):void{
				if(type == null){
					cursorManager.removeAllCursors();
				}else{
					cursorManager.removeAllCursors();
					cursorManager.setCursor(type);
				}
			}
		]]>
	</fx:Script>

	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<s:controlBarContent>
		<s:HGroup verticalAlign="middle" horizontalAlign="left">
			<s:Label text="基站总数:" fontSize="14" color="0xffffff"/><s:Label id="markTotalNum" fontSize="14" color="0x78E063"/>
		</s:HGroup>
		
		<s:TextInput id="pos_from" text="668,129"/>
		<s:Label text="to"/>
		<s:TextInput id="pos_to" text="180,114"/>
		<s:Button label="line" click="toLine()"/>
				

		<s:Button label="添加" click="addNewMarker()" enabled="{markMask.layerShow}"/>
		
		<s:TextInput id="markPos" width="200" text="668,129"/>
		<s:Button label="定位" click="fixPosMarker()"/>
	</s:controlBarContent>
	

	
	<s:BorderContainer width="100%" height="100%"  autoLayout="true" id="container" borderVisible="false">

		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		
		<s:BorderContainer id="map_mask" width="100%" height="100%" ></s:BorderContainer>
		<s:BorderContainer id="map_container" styleName="mapContainer" width="100%" height="100%"  mask="{map_mask}">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
			<!--画布  -->	
			<degrafa:Surface id="map_surface">
				
				<!-- 地图路径层-->
				<module:MapPath id="map_group" useHandCursor="false" scaleX="2" scaleY="2"></module:MapPath>
				
				<degrafa:GeometryGroup id="ocean_isles_group" scaleX="1" scaleY="1" ></degrafa:GeometryGroup>
				
				<!-- 标记移动打开后 显示遮罩层-->
				<degrafa:GeometryGroup id="markmask_group" scaleX="1" scaleY="1" ></degrafa:GeometryGroup>
				
				<!-- 标记连接打开后 显示遮罩层-->
				<degrafa:GeometryGroup id="linemask_group" scaleX="1" scaleY="1" ></degrafa:GeometryGroup>
				
				<!-- 标记阴影放置层-->
				<degrafa:GeometryGroup id="markshadow_group" x="0" y="0" scaleX="1" scaleY="1" ></degrafa:GeometryGroup>
				
				<!-- 连接线层-->
				<degrafa:GeometryGroup id="line_group" x="0" y="0" scaleX="1" scaleY="1" ></degrafa:GeometryGroup>
				
				<!-- 标记放置层-->
				<degrafa:GeometryGroup id="mark_group" x="0" y="0" scaleX="1" scaleY="1" ></degrafa:GeometryGroup>
				
				
				
				
			</degrafa:Surface>	
			
			
		</s:BorderContainer>
			
	</s:BorderContainer>
	
	
	<fx:Script>
		<![CDATA[
			
			private function fixPosMarker():void{
				
				var vals:String = markPos.text;
				var markpoint:Point = new Point(0,0);
				markpoint.x = Number(vals.split(",")[0]);
				markpoint.y = Number(vals.split(",")[1]);
				//trace(map_surface.globalToLocal(markpoint));
				
				initMapPosition(markpoint,1.5);
			}
			
			private function addNewMarker():void{
				var obj:Object = new Object();
				obj.id = "add marker";
				obj.cn = "add marker";
				obj.en = "add marker";;
				
				obj.pos = new Point(630,130);
				
				obj.loc_pos = obj.pos;								//转化坐标 本地坐标
				
				obj.gl_pos = transformMapToMarkPostion(obj.pos);	//转化坐标 全局坐标
				
				obj.type = "1";
				
				addSiteMark(obj);
			}
			
		]]>
	</fx:Script>
	
</s:Application>
