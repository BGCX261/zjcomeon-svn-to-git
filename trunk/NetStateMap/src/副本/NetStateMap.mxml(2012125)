<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   
			   width="100%" height="100%"
			   
			   xmlns:degrafa="http://www.degrafa.com/2007" 
			   xmlns:paint="com.degrafa.paint.*"
			   xmlns:geometry="com.degrafa.geometry.*" 
			   
			   xmlns:local="*"
			   
			   creationComplete="initMap()"
			   
			   skinClass="skin.myApplicationSkin"
			   >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Style source="Style.css"/>
	
	
	<fx:Script>
		<![CDATA[
			import skin.myApplicationSkin;

			
			/***
			 * 
			 * 外部接口
			 * */
			private function ConnectionFun():void{
				if(ExternalInterface.available){
					if(ExternalInterface.call("jsReady")){
						
						//ExternalInterface.addCallback("setPingData",setPingData);
						
						var pingDataObj:Object = ExternalInterface.call("setPingData");
						setPingData(pingDataObj);
						
					}else{
						//Alert.show("Connection Failed");
						
						
						var data:Object={
							self:{id:"cn",en:"china",cn:'中国'},
							ping:[
								{id:"in",en:"India",cn:"印度",state:0},
								{id:"kp",en:"R.O.Korea",cn:"韩国",state:1},
								{id:"jp",en:"Japan",cn:"日本",state:1}
							]
						}
						
						//setPingData(data);
					}
				}
			}
			
			/**
			 * 
			 * 设置站点快捷按钮，点击后显示网络线
			 * 
			 * @param obj:站点数据 (json格式)
			 * */
			private function setPingData(obj:Object):void{
				//总站
				var self:SiteShortCut = new SiteShortCut(obj.self);
				
				//SiteShortCut_group.addChild(self);
				self.y = 0;
				
				
				//ping对象
				var ping:Object = obj.ping;
				for(var i:int=0;i<ping.length;i++){
					
					var site:SiteShortCut = new SiteShortCut(ping[i]);
					trace(site.width)
					site.x = i*site.width
					
					//SiteShortCut_group.addChild(site);
					

					
					site.addEventListener(MouseEvent.CLICK,pingSite);
				}
			}
			
			private function pingSite(evt:MouseEvent):void{
				
				var ssc:SiteShortCut = evt.target as SiteShortCut;
				
				
				/* for(var i:int=0;i<sitesMarkPosArrCol.length;i++){
					
					if(sitesMarkPosArrCol[i].id == ssc.sscId){
						
						//画ping线
						//pingSiteLine(selfMarkObj, sitesMarkPosArrCol[i], ssc.sscState);	
					}
					
				} */
			}
			
			/**
			 * 
			 * 画网络线
			 * 
			 * @param from：起始对象
			 * 
			 * @param to：目标对象
			 * @param state：网络状态
			 * */
			private function pingSiteLine(from:Object, to:Object, state:String):void{
				var fx:String = from.pos.split(",")[0];
				var fy:String = from.pos.split(",")[1];
				
				var fp:Point = new Point(Number(fx),Number(fy));
				
				var tx:String = to.pos.split(",")[0];
				var ty:String = to.pos.split(",")[1];
				var tp:Point = new Point(Number(tx),Number(ty));
				
				//localToContent(
				
				
				var lineId:String = (fp.x+"-"+fp.y) + "&" + (tp.x+"-"+tp.y);
				
				trace(lineId);
				
				//先删除
				delNetStateLine(line_group,lineId)
				
				//再创建
				var line:NetStateLine = new NetStateLine(fp, tp,state);
				line_group.addChild(line);
				netStateLineArrCol.addItem(line);
				
				
				
				
			}
			/**
			 * 
			 * 延时删除网络线
			 * @param line:当前网络线
			 * @param tpoint:目标对象坐标
			 * @param fpoint:起始对象坐标
			 * */
			private function myDelayedCall(line:Sprite, tpoint:Point, fpoint:Point):void{
				
				line_group.removeChild(line);
				
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Script>
		<![CDATA[
			import mx.core.INavigatorContent;
			import mx.events.ResizeEvent;
			import MapMark.MapMark;
			import MapMark.MapMarkList;
			
			import MapNav.MapNav;
			
			import com.adobe.serialization.json.JSON;
			import com.greensock.TweenLite;
			import com.greensock.TweenMax;
			import com.greensock.layout.AutoFitArea;
			import com.greensock.layout.ScaleMode;
			import com.greensock.plugins.TweenPlugin;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.ToolTip;
			import mx.managers.ToolTipManager;
			
			import spark.primitives.Rect;
			
			/**当前地图缩放比率*/
			private var currentMapScaleX:Number = 1;
			private var currentMapScaleY:Number = 1;
			/**当前地图坐标*/
			private var currentMapPos:Point = new Point(0,0);
			/**当前鼠标缩放值*/
			private var currentMapZoom:Number = 1;
			/**当前鼠标缩放坐标*/
			private var currentMapMousePos:Point = new Point(0,0);
			
			private var isMapFocus:Boolean = false;
			private var drapT:Number,drapR:Number,drapB:Number,drapL:Number
			
			
			private var pos:Array = new Array();
			private var distance:Number = 20;
			
			private var markDrapPoint:Point = new Point(0,0);
			
			/**保存所有标记*/
			private var markerGroupArr:Array = new Array();
			
			/**自己*/
			private var selfMarkObj:Object = new Object();
			/**所有站点*/
			private var markerDataArray:Array = new Array();
			private var sitesMarkArrCol:ArrayCollection = new ArrayCollection();
			/**所有网络状态线*/
			private var netStateLineArrCol:ArrayCollection = new ArrayCollection();
			
			/**导航工具*/
			private var nav:MapNav;
			/**站点列表*/
			private var markList:MapMarkList;
			
			private function initMap():void{
				
				//TweenPlugin.activate([TransformAroundPointPlugin]);
				
				
				
				/**初始化地图tip*/
				//initToolTip();
				
				/**初始化地图位置*/
				
				initMapPosition(new Point(2353,463));
				
				/**初始化导航*/
				init_MapNav();
				
				/**初始化站点*/
				init_Mark();
				
				/**初始化地图鼠标事件*/
				initMapEvent();
				
				
				
				
				
				
				/**外部接口*/
				//ConnectionFun();
				
								
				init_markDoubClick();

			}
			
			
			/**
			 * 设置缩放
			 * */
			private function setScalZoom(evt:MouseEvent):void{
					//获取当前鼠标所在位置坐标
					var omx:Number = map_surface.mouseX;
					var omy:Number = map_surface.mouseY;
					
					//trace(map_surface.getBounds(map_surface))
					
					//trace("mousepos:",omx,omy)
					if(evt.delta>0){
						currentMapZoom = nav.zVSliderInterval; 
					}else{
						currentMapZoom = -nav.zVSliderInterval;
					}
					//currentMapZoom = (evt.delta-1)/100;
					
					//currentMapMousePos = new Point(omx*evt.delta/100,omy*evt.delta/100);
					currentMapMousePos = new Point(omx*currentMapZoom,omy*currentMapZoom);
					
					/* map_surface.scaleX += currentMapZoom;
					map_surface.scaleY += currentMapZoom;
					map_surface.x -= omx*currentMapZoom;
					map_surface.y -= omy*currentMapZoom; */
					
					
					/**如果当前滚轮值超过 最大最小值 ，则设定当前刻度值为最大最小值**/
					if((nav.getSliderValue() + currentMapZoom) < nav.getSliderMiniValue()){
						nav.setSliderValueFromMouseWheel(nav.getSliderMiniValue());
					}
					else if((nav.getSliderValue() + currentMapZoom) > nav.getSliderMaxValue()){
						nav.setSliderValueFromMouseWheel(nav.getSliderMaxValue());
					}
					else{
						
						var sliderVal:Number = Math.floor((nav.getSliderValue() + currentMapZoom)*100)/100;
						trace("sliderVal:",sliderVal)
						nav.setSliderValueFromMouseWheel(sliderVal);
						
						map_surface.scaleX = sliderVal;
						map_surface.scaleY = sliderVal;
						//map_surface.scaleX = nav.getSliderValue() + currentMapZoom;
						//map_surface.scaleY = nav.getSliderValue() + currentMapZoom;
						map_surface.x -= omx*currentMapZoom;
						map_surface.y -= omy*currentMapZoom;
					}

					
					
					//changeMapZoom(null);
					
					
					/* 
					map_surface.scaleX += evt.delta/100;
					map_surface.scaleY += evt.delta/100;
					map_surface.x -= omx*evt.delta/100;
					map_surface.y -= omy*evt.delta/100;
					*/
	
			}
			

			
			/**
			 * setScalZoom:鼠标缩放
			 * mapStartDrap:拖动应用
			 * onMapMouseOver：高亮显示
			 * */
			private function initMapEvent():void{
				
				map_surface.addEventListener(MouseEvent.MOUSE_WHEEL,setScalZoom);
				
				map_container.addEventListener(MouseEvent.MOUSE_DOWN,mapStartDrap);
				
				map_surface.addEventListener(MouseEvent.MOUSE_MOVE,onMapMouseOver);
				//map_surface.addEventListener(MouseEvent.MOUSE_OVER,onMapMouseOver);
				
				this.addEventListener(MouseEvent.MOUSE_OVER,onAppMouseOver);
				this.addEventListener(ResizeEvent.RESIZE,onAppLayout);
			}
			
			private function mapStartDrap(evt:MouseEvent):void{
				/**如果地图未锁*/
				if(!nav.getLockState()){
					if(evt.target is SiteItem || evt.target is MapPath){
				
						/**改变鼠标指针形状*/
						//cursorManager.setCursor( CursorOpenHand );
						setCursorType(CursorCloseHand);
						
						if(mapMoveEnable.selected){
							//var dragRect:Rectangle=new Rectangle(0,0,3000,1500);
							//var dragRect:Rectangle=new Rectangle(drapL,drapT,drapR-drapL,drapB-drapL);
							map_container.startDrag(false);
							map_container.addEventListener(MouseEvent.MOUSE_UP,mapStopDrag);
						}
					}
				}
			}
				
			private function mapStopDrag(evt:MouseEvent):void{
				/**删除鼠标指针形状*/
				
				setCursorType(CursorOpenHand);
				
				map_container.stopDrag();
				map_container.removeEventListener(MouseEvent.MOUSE_UP,mapStopDrag);
			}
			
			/**
			 * 
			 * 计算移动位置 防止超出
			 * */
			private function getDragArea():void {
				var _r:Number = container.x+map_surface.width/2;
				var _b:Number = container.y+map_surface.height/2;
				var _l:Number = _r-(map_surface.width-container.width);
				var _t:Number = _b-(map_surface.height-container.height);
				//trace(_r,_b,_l,_t)
				drapR = _r;//right
				drapB = _b;//bottom
				drapL = _l;//left
				drapT = _t;//top
				
				
			}
			
			/**
			 * 初始化站点
			 * 
			 * */
			[Bindable] private var sites:XMLList;  
			private function init_Mark():void{
				
				var request:URLRequest = new URLRequest("data/sites.xml");  
				var loader:URLLoader = new URLLoader(request);  
				loader.addEventListener(Event.COMPLETE, loaderCompleteHandler);  
				
			}
			private function loaderCompleteHandler(evt:Event):void{
				var xml:XML = XML(evt.target.data)
				
				sites = xml.site as XMLList;
				
				var tempMarkX:Number = 10;
				for(var i:int=0;i<sites.length();i++){
					
					var site_id:String  = sites[i].@id;
					var site_en:String = sites[i].@en;
					var site_cn:String = sites[i].@cn;
					var site_pos:String = sites[i].@pos;
					
					var pos:Point = new Point(Number(site_pos.split(",")[0]),Number(site_pos.split(",")[1]));
					
					
					
					/* if(site_id == "cn"){
						selfMarkObj.id = site_id;
						selfMarkObj.name = site_cn;
						selfMarkObj.pos = site_pos;
						selfMarkObj.state = site_state;
					} */
					var obj:Object = new Object();
					obj.id = site_id;
					obj.cn = site_cn;
					obj.en = site_en;
					obj.pos = pos;
					sitesMarkArrCol.addItem(obj);
					
					markerDataArray.push(obj);
					
					
					addSiteMark(obj);
					
					
					var site:SiteShortCut = new SiteShortCut(obj);
					site.x = (i)*tempMarkX;
					tempMarkX = tempMarkX+site.width;
					//siteShort_group.addChild(site);
				}
				
				
				/**初始化站点列表*/
				init_MarkList();
			}
			
			
			/**
			 * 初始化站点列表
			 * */
			private function init_MarkList():void{
				
				markList = new MapMarkList(markerDataArray,"站点索引");
				
				markList.x = container.width - 20;
				markList.y = 50;
				this.container.addElement(markList);
				
				markList.drawMarkerItem();
				
				
			}
			
			
			
			/**
			 * 初始化导航
			 * */
			private function init_MapNav():void{
				currentMapScaleX = map_surface.scaleX;
				currentMapScaleY = map_surface.scaleY;
				currentMapPos.x = map_surface.x;
				currentMapPos.y = map_surface.y;
				
				nav = new MapNav();
				nav.x = 10;
				nav.y = 50;
				container.addElement(nav);
				
				//拖动控制缩放
				nav.zVSlider.slider.addEventListener(Event.CHANGE,changeMapZoom);
				//左右按钮控制缩放
				nav.zVSlider.zoomOut.addEventListener(MouseEvent.CLICK,changeMapZoomIn);
				nav.zVSlider.zoomIn.addEventListener(MouseEvent.CLICK,changeMapZoomOut);
			}
			private function changeMapZoom(evt:Event):void{
				
				var zoom:Number =  Number(nav.zVSlider.slider.value);
				
				trace("slider:",zoom)
				
				var relativeZoom:Number = zoom / map_surface.scaleX;
				
				trace(map_surface.scaleX,relativeZoom)
				
				var origin:Point = new Point(container.width/2,container.height/2)
				//trace("origin：",origin);
				var centerPoint:Point = map_surface.globalToLocal(origin);
				//trace("centerPoint：",centerPoint);
				centerPoint.x *= relativeZoom;
				centerPoint.y *= relativeZoom;
				var newCenterPoint:Point = map_surface.localToGlobal(centerPoint);
				//trace("newCenterPoint：",newCenterPoint);
				var offset:Point = origin.subtract(newCenterPoint);
				//trace("offset：",offset);
				
				TweenLite.to(map_surface, 0, {x:(map_surface.x+offset.x),y:(map_surface.y+offset.y),scaleX:(map_surface.scaleX*relativeZoom),scaleY:(map_surface.scaleY*relativeZoom)});
		
			
				resetAllMarkPoint();
			}
			private function changeMapZoomIn(evt:MouseEvent):void{
				nav.zVSlider.slider.value -= nav.zVSliderInterval;		//间隔
				changeMapZoom(null);
			}
			private function changeMapZoomOut(evt:MouseEvent):void{
				nav.zVSlider.slider.value += nav.zVSliderInterval;		//间隔 
				changeMapZoom(null);
			}
			
			/**
			 * 重新设置标记坐标
			 * 
			 * */
			private function resetAllMarkPoint():void{
				var marks:int = mark_group.numChildren;
				for(var ii:int=0;ii<marks;ii++){
					//mark_group.removeChildAt(ii);
				}
				for(var i:int=0;i<markerGroupArr.length;i++){
					var m:MapMark = markerGroupArr[i] as MapMark;
					
					var mp:Point = m.objData.pos;
					var p:Point = map_surface.localToGlobal(mp);
					
					m.x = p.x ;
					m.y = p.y ;
	
					//mark_group.addChild(m);
					//m.x = m.objData.pos.x;
					//m.y = m.objData.pos.y;
					
				}
				
			}
			
			/*****
			 * 
			 * 
			 * *************/
			private function init_markDoubClick():void{
				map_group.doubleClickEnabled = true;
				
				map_group.addEventListener(MouseEvent.DOUBLE_CLICK,setMarkPoint);
			}
			private function setMarkPoint(evt:MouseEvent):void{
				trace("(dc)mark point:",this.mouseX,this.mouseY, map_group.mouseX);
				
				//markPos.text = (Number(this.mouseX))+","+this.mouseY;
				//markPos.text = (Number(map_group.mouseX))+","+map_group.mouseY;
				
			}
			
			private function addMark_input():void{
				var vals:String = markPos.text;
				var markpoint:Point = new Point(0,0);
				markpoint.x = Number(vals.split(",")[0]);
				markpoint.y = Number(vals.split(",")[1]);
				
				//addSiteMark(markpoint,"","MARK","标记");
				
			}
			
			private function addSiteMark(data:Object):void{
				

				
				var mark:MapMark = new MapMark(data,markMoveEnable.selected);
				mark_group.addChild(mark);
				//mark.x = data.pos.x;//markPoint.x;
				//mark.y = data.pos.y;//markPoint.y;
				
				//map_container.addElement(mark);
				
				var p:Point = map_surface.localToGlobal(data.pos);
				mark.x = p.x;
				mark.y = p.y;
				
				
				//trace(markPoint,map_surface.globalToLocal(markPoint));
				//trace(markPoint,map_surface.localToGlobal(markPoint));
				//trace("-------------------------------------");
				
				/**放入标记数组*/
				markerGroupArr.push(mark);
				
			}
			
			/*****
			 * 
			 * 
			 * *************/
			
			private function toLine():void{
				var fx:String = pos_from.text.split(",")[0];
				var fy:String = pos_from.text.split(",")[1];
				
				var tx:String = pos_to.text.split(",")[0];
				var ty:String = pos_to.text.split(",")[1];
				
				
				
				var fp:Point = new Point(Number(fx),Number(fy));
				var tp:Point = new Point(Number(tx),Number(ty));
				
				//实线
				var lineId:String = (fp.x+"-"+fp.y) + "&" + (tp.x+"-"+tp.y);		
				//先删除
				delNetStateLine(line_group,lineId)
				var line:NetStateLine = new NetStateLine(fp, tp,"1");
				line_group.addChild(line);
				netStateLineArrCol.addItem(line);
				
				//延时删除
				TweenLite.delayedCall(20, delNetStateLine, [line_group,lineId]);
				
				
			}
			
			/**
			 * 
			 * 删除网络状态线
			 * @param parent:父级容器
			 * @param lineId:线id
			 * */
			private function delNetStateLine(parent:Sprite, lineId:String):void{
				for(var i:int=0;i<netStateLineArrCol.length;i++){
					if(netStateLineArrCol[i].nslId == lineId){
						
						parent.removeChild(netStateLineArrCol[i]);
						
						netStateLineArrCol.removeItemAt(i);
						netStateLineArrCol.refresh();
						
					}
				}
			}
			
			/**
			 * 
			 * 查找网络状态线
			 * @param lineId:线id
			 * */
			private function getNetStateLine(lineId:String):NetStateLine{
				var line:NetStateLine = null;
				
				for(var i:int=0;i<netStateLineArrCol.length;i++){
					if(netStateLineArrCol[i].nslId == lineId){
						line = netStateLineArrCol[i];
					}
				}
				
				return line;
			}
			
		]]>
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			import com.degrafa.geometry.Path;
			import flash.filters.GlowFilter;
			
			
			/**
			 * 定位到指定标记
			 * @param pos：标记坐标
			 * @param duration：持续时间
			 * */
			public function initMapPosition(pos:Point,duration:Number = 0):void{
				
				var px:Number = -pos.x+map_container.width/2;
				var py:Number = -pos.y+map_container.height/2;
				//trace(pos,container.width/2,container.height/2,"--",px,py)
				
				//定位至亚洲，中国
				TweenLite.to(map_container, duration, {x:px,y:py});
				
				//mark_surface.x = map_surface.x
				//mark_surface.y = map_surface.y;
			}
			
			private var mapToolTip:ToolTip;
			private function initToolTip():void{
				
				mapToolTip=ToolTip(ToolTipManager.createToolTip("", 0, 0, null));
				mapToolTip.visible=false;
				
			}
			
			/**高亮*/
			private var selectionGlow:GlowFilter=new GlowFilter(0xFFFFFF, 0.8, 10, 10, 3);
			
			private function onMapMouseOver(evt:MouseEvent):void{
				
				//markPos.text = map_surface.mouseX + "," +map_surface.mouseY;
				markPos.text = mark_group.mouseX + "," +mark_group.mouseY + "/"+this.mouseX+","+this.mouseY;
				
				if (evt.target is SiteItem){
					
					map_group.addEventListener(MouseEvent.MOUSE_MOVE, onMove);
					
					//mapToolTip.visible = true;
					//mapToolTip.text = evt.target.tooltip;
					
					//var path:Path = evt.target.geometry[0];
					//path.filters = [selectionGlow];
				}
				
			}
			private function onMapMouseOut(evt:MouseEvent):void{
				//map_surface.toolTip = "";
				
				//mapToolTip.visible = false;
				
				//map_group.removeEventListener(MouseEvent.MOUSE_MOVE, onMove);
				
				if (evt.target is SiteItem){
					var path:Path = evt.target.geometry[0];
					//path.filters = null;
				}else{
					
				}
			}
			
			private function onMove(evt:MouseEvent):void{
				if (mapToolTip)
				{
					mapToolTip.move(evt.stageX + 10, evt.stageY);
					if (mapToolTip.visible == false){
						mapToolTip.visible=true;
					}
				}
			}
			
			/**
			 * 
			 * 设置标记是否移动
			 * */
			private function setMakerMove():void{
				var enable:Boolean = markMoveEnable.selected;
			
				for(var i:int=0;i<markerGroupArr.length;i++){
					markerGroupArr[i].setMarkerMove(enable);
				}
	
			}
			
			/**
			 * 设置光标类型
			 * 
			 * */
			private function setCursorType(type:Class):void{
				if(type == null){
					cursorManager.removeAllCursors();
				}else{
					cursorManager.removeAllCursors();
					cursorManager.setCursor(type);
				}
			}
			
			/**
			 * 重新布局
			 * */
			private function onAppLayout(evt:ResizeEvent):void{
				markList.x = container.width - 20;
				nav.x = 10;
			}
			
			private function onAppMouseOver(evt:MouseEvent):void{
				//trace(evt.target)
				if(evt.target is MapPath || evt.target is SiteItem){
					setCursorType(CursorOpenHand);
				}else{
					setCursorType(null);
				}
			}
		]]>
	</fx:Script>

	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<s:controlBarContent>
				<!--controll-->
				<s:CheckBox id="mapMoveEnable" label="设置地图拖动" selected="true" />
				
				
				<s:CheckBox id="markMoveEnable" label="设置站点拖动" selected="false" change="setMakerMove()"  />
		
				<!--line point-->
				<s:TextInput id="pos_from" text="2353,463"/>
				<s:Label text="to"/>
				<s:TextInput id="pos_to" text="1959,474"/>
				<s:Button label="line" click="toLine()"/>
				
				
				<s:TextInput id="markPos" text="200,200"/>
				<s:Button label="定位" click="fixPosMarker()"/>
	</s:controlBarContent>
	

	
	<s:BorderContainer width="100%" height="100%"  autoLayout="true" id="container" borderVisible="false">

		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		
		<s:BorderContainer id="map_mask" width="100%" height="100%" ></s:BorderContainer>
		<s:BorderContainer id="map_container" styleName="mapContainer" width="100%" height="100%"  mask="{map_mask}">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
			<!--画布  -->	
			<degrafa:Surface id="map_surface">
				
				<local:MapPath id="map_group" useHandCursor="false">
							
				</local:MapPath>
						
				<degrafa:GeometryGroup id="line_group" x="0" y="0" scaleX="1" scaleY="1" >
					<!--<degrafa:filters>
						<mx:DropShadowFilter color="0x000000" alpha=".23" distance="23" angle="90"/>
					</degrafa:filters>-->
				</degrafa:GeometryGroup>
				
				<degrafa:GeometryGroup>
					<degrafa:GeometryGroup>
						
					</degrafa:GeometryGroup>
				</degrafa:GeometryGroup>
			</degrafa:Surface>	
			
			<degrafa:Surface id="mark_surface">
				<degrafa:GeometryGroup id="mark_group" x="0" y="0" scaleX="1" scaleY="1" >
					<degrafa:fills>
						<degrafa:SolidFill color="0xcccccc" alpha="0.3" id="f"/>
					</degrafa:fills>
					<degrafa:RegularRectangle width="300" height="300" fill="{f}"/>
				</degrafa:GeometryGroup>
			</degrafa:Surface>

		</s:BorderContainer>
			
		<!--<s:ButtonBar id="mapBtnBar" x="10" y="10">
			<s:ArrayCollection>
				<s:Button label="显示站点列表" />
				<s:Button label="设置站点坐标"/>
			</s:ArrayCollection>
		</s:ButtonBar>-->
		
			<!--<degrafa:Surface x="0" y="{container.height - 100}" scaleX="1" scaleY="1" mask="{map_mask}">
				<degrafa:GeometryGroup id="siteShort_group" >
					
					<degrafa:fills>
						<degrafa:SolidFill color="#000000" alpha=".5" id="siteShortFill"/>
					</degrafa:fills>
					<degrafa:RegularRectangle fill="{siteShortFill}" width="{container.width}" height="100"/>
					
				</degrafa:GeometryGroup>
			</degrafa:Surface>-->

	</s:BorderContainer>
	
	
	<fx:Script>
		<![CDATA[
			
			private function fixPosMarker():void{
				
				var vals:String = markPos.text;
				var markpoint:Point = new Point(0,0);
				markpoint.x = Number(vals.split(",")[0]);
				markpoint.y = Number(vals.split(",")[1]);
				//trace(map_surface.globalToLocal(markpoint));
				
				initMapPosition(markpoint,1.5);
			}
		]]>
	</fx:Script>
	
</s:Application>
